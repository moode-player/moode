################################################################
#
# Build Recipe v2.10, 2019-06-12
#
# moOde 5.3.1 2019-06-12
#
# These instructions are written for Linux Enthusiasts
# and System Integrators and provide a recipe for making
# a custom OS for running moOde audio player.
#
# NOTE: This recipe is based on Stretch Lite 2018-11-13
#
# Unless otherwise noted or if a command requires user
# interaction, groups of commands can be run in batch.
#
# (C) Tim Curtis 2017 http://moodeaudio.org
#
################################################################

////////////////////////////////////////////////////////////////
//
// STEP 1 - Modify Raspbian Lite and create a new, base image
//
// Use one of the two options below depending on what
// type of host computer you are going to be using.
//
////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////
// OPTION 1: Using Raspbian Linux (Raspberry Pi)
////////////////////////////////////////////////////////////////

1. Download Raspbian Stretch Lite 2018-11-13
wget http://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2018-11-15/2018-11-13-raspbian-stretch-lite.zip
sudo unzip 2018-11-13-raspbian-stretch-lite.zip
sudo rm 2018-11-13-raspbian-stretch-lite.zip

2. Mount the boot and root partitions
LOOPDEV=$(sudo losetup -f)
sudo losetup -P $LOOPDEV 2018-11-13-raspbian-stretch-lite.img
sudo mkdir /mnt/p1
sudo mkdir /mnt/p2
sudo mount -t vfat "$LOOPDEV"p1 /mnt/p1
sudo mount -t ext4 "$LOOPDEV"p2 /mnt/p2

3. Enable SSH
sudo touch /mnt/p1/ssh

4. Optionally enable WiFi connection
a. sudo nano /mnt/p1/wpa_supplicant.conf
b. Paste the lines below into the file making approproate substitutions for SSID and PASSWORD
c. Save the file (Ctrl-x y <return>)

country=GB
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
ssid="YourSSID"
scan_ssid=1
psk="YourPASSWORD"
}

5. Remove Auto-Resize task & switch to using std interface names (eth0, wlan0)
sudo sed -i "s/init=.*//" /mnt/p1/cmdline.txt
sudo sed -i "s/quiet.*//" /mnt/p1/cmdline.txt
sudo rm /mnt/p2/etc/init.d/resize2fs_once
# Configure to use standard interface names
sudo sed -i "s/^/net.ifnames=0 /" /mnt/p1/cmdline.txt

6. Cleanup
sudo losetup -D
sudo umount /mnt/p1
sudo umount /mnt/p2
sudo rmdir /mnt/p1
sudo rmdir /mnt/p2

7. Install the modified .img file to an SD Card

8. Power off

# SR1
sudo poweroff

////////////////////////////////////////////////////////////////
// OPTION 2: Using Windows or Mac computer
////////////////////////////////////////////////////////////////

1. Download Raspbian Stretch Lite 2018-11-13
http://downloads.raspberrypi.org/raspbian_lite/images/raspbian_lite-2018-11-15/2018-11-13-raspbian-stretch-lite.zip

2. Unzip and install the .img file to an SD Card
https://www.raspberrypi.org/documentation/installation/installing-images/

3. Eject the SD Card and then re-insert it
4. Open File Manager (Windows) or Finder (Mac)
5. Click the device named "boot" to show its contents
6. Create an empty file named "ssh" in the boot directory
7. Optionally enable WiFi connection
a. Create a file named wpa_supplicant.conf in the boot directory
b. Paste the lines below into the file making approproate substitutions for SSID and PASSWORD
c. Save the file

country=GB
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network={
ssid="YourSSID"
scan_ssid=1
psk="YourPASSWORD"
}

8. Edit the file named cmdline.txt

# Remove the text below
quiet init=/usr/lib/raspi-config/init_resize.sh

# Add this text to beginning of the line. Ensure there is a space between this text and the remaining text.
net.ifnames=0

9. Eject the SD Card

////////////////////////////////////////////////////////////////
//
// STEP 2 - Expand the root partition to 3GB
//
////////////////////////////////////////////////////////////////

1. Insert the SD Card into a Raspberry Pi and POWER UP.

2. Change the current password (raspberry) to moodeaudio and the host name to moode.

ssh pi@raspberrypi (pwd=raspberry)

echo "pi:moodeaudio" | sudo chpasswd
sudo sed -i "s/raspberrypi/moode/" /etc/hostname
sudo sed -i "s/raspberrypi/moode/" /etc/hosts

3. Change timezone to local time zone

sudo timedatectl set-timezone "America/Detroit"

4. Download moOde application sources and configs.

//
// NOTE: We are downloading the Sources in this particular step in order to obtain the resizefs.sh file.
//

cd ~
wget http://moodeaudio.org/downloads/prod/moode-r531.zip
sudo unzip ./moode-r531.zip

5. Expand the root partition to 3GB.

sudo cp ./moode/www/command/resizefs.sh ./
sudo chmod 0755 ./resizefs.sh
sudo sed -i "/PART_END=/c\PART_END=+3000M" ./resizefs.sh
sudo ./resizefs.sh start
sudo rm ./resizefs.sh
sudo cp ./moode/boot/config.txt.default /boot/config.txt

# SR1
sudo reboot

////////////////////////////////////////////////////////////////
//
// STEP 3 - Install core packages
//
////////////////////////////////////////////////////////////////

1. First lets make some basic optimizations

ssh pi@moode (pwd=moodeaudio)

sudo dphys-swapfile swapoff
sudo update-rc.d dphys-swapfile remove
sudo rm /var/swap
sudo systemctl disable cron.service
sudo systemctl enable rpcbind
sudo systemctl set-default multi-user.target
sudo apt-get -y purge triggerhappy

2. Install core packages.

# NOTE: run these two commands separately
sudo apt-get update
sudo apt-get -y upgrade

# SR2
sudo reboot

sudo apt-get update

sudo apt-get -y install rpi-update php-fpm nginx sqlite3 php-sqlite3 memcached php-memcache php7.0-gd mpc \
bs2b-ladspa libbs2b0 libasound2-plugin-equal telnet automake sysstat squashfs-tools tcpdump shellinabox \
samba smbclient udisks-glue ntfs-3g exfat-fuse git inotify-tools libav-tools avahi-utils ninja-build \
python3-setuptools libmediainfo0v5 libmms0 libtinyxml2-4 libzen0v5 libmediainfo-dev libzen-dev winbind libnss-winbind

# meson
sudo cp ./moode/other/mpd/build-tools/meson-0.50.1.tar.gz ./
sudo tar xfz meson-0.50.1.tar.gz
cd meson-0.50.1
sudo python3 setup.py install
cd ~
sudo rm -rf meson-0.50.1*

# mediainfo
sudo cp ./moode/other/mediainfo/mediainfo-18.12 /usr/local/bin/mediainfo

sudo systemctl disable shellinabox

////////////////////////////////////////////////////////////////
//
// STEP 4 - Install enhanced networking
//
////////////////////////////////////////////////////////////////

1. Install Host AP mode

sudo apt-get -y install dnsmasq hostapd

# Install precompiled hostapd 2.7 binaries
sudo mv ./moode/other/hostapd/hostapd-2.7 /usr/sbin/hostapd
sudo mv ./moode/other/hostapd/hostapd_cli-2.7 /usr/sbin/hostapd_cli

sudo systemctl daemon-reload
sudo systemctl unmask hostapd
sudo systemctl disable hostapd
sudo systemctl disable dnsmasq

2. Install Bluetooth

sudo apt-get -y install bluez-firmware pi-bluetooth \
dh-autoreconf expect libdbus-1-dev libortp-dev libbluetooth-dev libasound2-dev \
libusb-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev libsbc1 libsbc-dev

# Compile bluez 5.50
# 2018-06-01 commit 8994b7f2bf817a7fea677ebe18f690a426088367
sudo cp ./moode/other/bluetooth/bluetooth/bluez-5.50.tar.xz ./
sudo tar xf bluez-5.50.tar.xz >/dev/null
cd bluez-5.50
sudo autoreconf --install
sudo ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-library
sudo make
sudo make install
cd ..
sudo rm -rf ./bluez-5.50*

# Delete symlink and bin for old bluetoothd
sudo rm /usr/sbin/bluetoothd
sudo rm -rf /usr/lib/bluetooth
# Create symlink for new bluetoothd
sudo ln -s /usr/libexec/bluetooth/bluetoothd /usr/sbin/bluetoothd

# Compile bluez-alsa 1.3.1
# 2019-03-10 commit d73282b25c613fff445ad3818a963e958b23cc20
sudo cp ./moode/other/bluetooth/bluez-alsa-master-d73282b.zip ./
sudo unzip -q bluez-alsa-master-d73282b.zip
cd bluez-alsa-master
# NOTE: Ignore warnings from autoreconf and configure
sudo autoreconf --install
sudo mkdir build
cd build
sudo ../configure --disable-hcitop --with-alsaplugindir=/usr/lib/arm-linux-gnueabihf/alsa-lib
sudo make
sudo make install
cd ../..
sudo rm -rf bluez-alsa-master*

3. Services are started by moOde Worker so lets disable them here.

sudo systemctl daemon-reload
sudo systemctl disable bluetooth.service
sudo systemctl disable hciuart.service

4. Finish up

sudo mkdir -p /var/run/bluealsa
sudo sync
sudo apt-get clean

# SR3
sudo reboot

////////////////////////////////////////////////////////////////
//
// STEP 5 - Install Rotary encoder driver
//
////////////////////////////////////////////////////////////////

1. WiringPi

NOTE: Ignore warnings during build

sudo cp ./moode/other/wiringpi/wiringPi-2.50-36fb7f1.tar.gz ./
sudo tar xfz ./wiringPi-2.50-36fb7f1.tar.gz
cd wiringPi-36fb7f1
sudo ./build
cd ~/
sudo rm -rf ./wiringPi*

2. Rotenc

sudo cp ./moode/other/rotenc/rotenc.c ./
sudo gcc -std=c99 rotenc.c -orotenc -lwiringPi
sudo cp ./rotenc /usr/local/bin
sudo rm ./rotenc*

////////////////////////////////////////////////////////////////
//
// STEP 6 - Compile and install MPD 0.20.x series
//
////////////////////////////////////////////////////////////////

1. Create MPD runtime environment.

sudo useradd mpd
sudo mkdir /var/lib/mpd
sudo mkdir /var/lib/mpd/music
sudo mkdir /var/lib/mpd/playlists
sudo touch /var/lib/mpd/state
sudo chown -R mpd:audio /var/lib/mpd
sudo mkdir /var/log/mpd
sudo touch /var/log/mpd/log
sudo chmod 644 /var/log/mpd/log
sudo chown -R mpd:audio /var/log/mpd
sudo cp ./moode/mpd/mpd.conf.default /etc/mpd.conf
sudo chown mpd:audio /etc/mpd.conf
sudo chmod 0666 /etc/mpd.conf

2. Install MPD dev libs.

sudo apt-get -y install libmad0-dev libmpg123-dev libid3tag0-dev \
libflac-dev libvorbis-dev libfaad-dev \
libwavpack-dev \
libavcodec-dev libavformat-dev \
libmp3lame-dev \
libsoxr-dev \
libcdio-paranoia-dev libiso9660-dev \
libcurl4-gnutls-dev \
libasound2-dev \
libshout3-dev libyajl-dev \
libmpdclient-dev \
libavahi-client-dev \
libsystemd-dev \
libwrap0-dev \
libboost-dev \
libicu-dev \
libglib2.0-dev

3. Download MPD 0.20.23 sources and prep for compile.

# Optionally install pre-compiled binary and skip to STEP 7
sudo cp ./moode/other/mpd/mpd-0.20.23 /usr/local/bin/mpd
sudo reboot

sudo wget http://www.musicpd.org/download/mpd/0.20/mpd-0.20.23.tar.xz
sudo tar xf mpd-0.20.23.tar.xz
cd mpd-0.20.23
sudo sh autogen.sh

4. Configure compile options.

sudo ./configure --enable-database --enable-libmpdclient --enable-alsa \
--enable-curl --enable-dsd --enable-ffmpeg --enable-flac \
--enable-id3 --enable-soundcloud --enable-lame-encoder --enable-mad \
--enable-mpg123 --enable-pipe-output --enable-recorder-output --enable-shout \
--enable-vorbis --enable-wave-encoder --enable-wavpack --enable-httpd-output \
--enable-soxr --with-zeroconf=avahi \
--disable-bzip2 --disable-zzip --disable-fluidsynth --disable-gme \
--disable-wildmidi --disable-sqlite --disable-jack --disable-ao --disable-oss \
--disable-ipv6 --disable-pulse --disable-nfs --disable-smbclient \
--disable-upnp --disable-expat --disable-lsr \
--disable-sndfile --disable-audiofile --disable-sidplay

5. Compile and install.

sudo make
sudo make install
sudo strip --strip-unneeded /usr/local/bin/mpd
cd ~
sudo rm -rf ./mpd-0.20.23*

sudo apt-get clean
sudo apt-get -y autoremove

# SR4
sudo reboot

////////////////////////////////////////////////////////////////
//
// STEP 6 - Compile and install MPD 0.21.x series
//
////////////////////////////////////////////////////////////////

1. Create MPD runtime environment.

sudo useradd mpd
sudo mkdir /var/lib/mpd
sudo mkdir /var/lib/mpd/music
sudo mkdir /var/lib/mpd/playlists
sudo touch /var/lib/mpd/state
sudo chown -R mpd:audio /var/lib/mpd
sudo mkdir /var/log/mpd
sudo touch /var/log/mpd/log
sudo chmod 644 /var/log/mpd/log
sudo chown -R mpd:audio /var/log/mpd
sudo cp ./moode/mpd/mpd.conf.default /etc/mpd.conf
sudo chown mpd:audio /etc/mpd.conf
sudo chmod 0666 /etc/mpd.conf

2. Install MPD dev libs.

sudo apt-get -y install libmad0-dev libmpg123-dev libid3tag0-dev \
libflac-dev libvorbis-dev libaudiofile-dev libfaad-dev \
libwavpack-dev \
libavcodec-dev libavformat-dev \
libmp3lame-dev \
libsoxr-dev \
libcdio-paranoia-dev libiso9660-dev \
libcurl4-gnutls-dev \
libasound2-dev \
libshout3-dev libyajl-dev \
libmpdclient-dev \
libavahi-client-dev \
libsystemd-dev \
libwrap0-dev \
libboost-dev \
libicu-dev \
libglib2.0-dev

3. Download MPD 0.21.8 sources and prep for compile.

# Optionally install pre-compiled binary and skip to STEP 7
sudo cp ./moode/other/mpd/mpd-0.21.8 /usr/local/bin/mpd
sudo reboot

sudo wget http://www.musicpd.org/download/mpd/0.21/mpd-0.21.8.tar.xz
sudo tar xf mpd-0.21.8.tar.xz
cd mpd-0.21.8
sudo meson . output/release --buildtype=release -Db_ndebug=true

4. Configure compile options.

sudo meson configure \
-Dalsa=enabled \
-Dcurl=enabled \
-Ddatabase=true \
-Ddsd=true \
-Dffmpeg=enabled \
-Dfaad=enabled \
-Dflac=enabled \
-Dhttpd=true \
-Did3tag=enabled \
-Dlame=enabled \
-Dlibmpdclient=enabled \
-Dmad=enabled \
-Dmpg123=enabled \
-Dpipe=true \
-Drecorder=true \
-Dshout=enabled \
-Dsoundcloud=enabled \
-Dsoxr=enabled \
-Dvorbis=enabled \
-Dwave_encoder=true \
-Dwavpack=enabled \
-Dzeroconf=avahi \
-Dao=disabled \
-Daudiofile=disabled \
-Dbzip2=disabled \
-Dexpat=disabled \
-Dfluidsynth=disabled \
-Dgme=disabled \
-Dipv6=disabled \
-Djack=disabled \
-Dlibsamplerate=disabled \
-Dnfs=disabled \
-Doss=disabled \
-Dpulse=disabled \
-Dsidplay=disabled \
-Dsmbclient=disabled \
-Dsndfile=disabled \
-Dsqlite=disabled \
-Dupnp=disabled \
-Dwildmidi=disabled \
-Dzzip=disabled \
-Ddbus=disabled \
-Dudisks=disabled \
output/release

5. Compile and install.

sudo ninja -C output/release
sudo ninja -C output/release install
cd ~
sudo rm -rf ./mpd-0.21.8*

sudo apt-get clean
sudo apt-get -y autoremove

# SR4
sudo reboot

////////////////////////////////////////////////////////////////
//
// STEP 7 - Create moOde runtime environment
//
////////////////////////////////////////////////////////////////

1. Privilages

sudo -i
echo -e 'pi\tALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
echo -e 'www-data\tALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
logout

2. Directories and files

# Dirs
sudo mkdir /var/local/www
sudo mkdir /var/local/www/commandw
sudo mkdir /var/local/www/imagesw
sudo mkdir /var/local/www/imagesw/toggle
sudo mkdir /var/local/www/db
sudo chmod -R 0755 /var/local/www
sudo mkdir /var/lib/mpd/music/RADIO
# Mount points
sudo mkdir /mnt/NAS
sudo mkdir /mnt/SDCARD
# Symlinks
sudo ln -s /mnt/NAS /var/lib/mpd/music/NAS
sudo ln -s /mnt/SDCARD /var/lib/mpd/music/SDCARD
sudo ln -s /media /var/lib/mpd/music/USB
# Logs
sudo touch /var/log/moode.log
sudo chmod 0666 /var/log/moode.log
sudo touch /var/log/php_errors.log
sudo chmod 0666 /var/log/php_errors.log
# Files
sudo cp ./moode/mpd/sticker.sql /var/lib/mpd
sudo cp -r "./moode/other/sdcard/Stereo Test/" /var/lib/mpd/music/SDCARD/
sudo cp ./moode/network/interfaces.default /etc/network/interfaces

## NOTE: if you created a wpa_supplicant.conf file back in STEP 1 to run the
## build over a WiFi connection then don't copy the wpa_supplicant.conf file.
## When you reach STEP 12 open Network config and enter your SSID and Password then APPLY.
## This will create a new wpa_supplicant.conf file and also update the sql database.

sudo cp ./moode/network/wpa_supplicant.conf.default /etc/wpa_supplicant/wpa_supplicant.conf

sudo cp ./moode/network/dhcpcd.conf.default /etc/dhcpcd.conf
sudo cp ./moode/network/hostapd.conf.default /etc/hostapd/hostapd.conf
sudo cp ./moode/var/local/www/db/moode-sqlite3.db.default /var/local/www/db/moode-sqlite3.db
# Permissions
sudo chmod 0777 /var/lib/mpd/music/RADIO
sudo chmod -R 0777 /var/local/www/db
# Deletes
sudo rm -r /var/www/html
sudo rm /etc/update-motd.d/10-uname

////////////////////////////////////////////////////////////////
//
// STEP 8 - Install moOde sources and configs
//
////////////////////////////////////////////////////////////////

1. Application sources and configs

# Ignore "no such file or directory" errors if they appear.
sudo rm /var/lib/mpd/music/RADIO/*
sudo rm -rf /var/www/images/radio-logos/

sudo cp ./moode/mpd/RADIO/* /var/lib/mpd/music/RADIO
sudo cp ./moode/mpd/playlists/* /var/lib/mpd/playlists
sudo cp -r ./moode/etc/* /etc
sudo cp -r ./moode/home/* /home/pi
sudo mv /home/pi/dircolors /home/pi/.dircolors
sudo mv /home/pi/xinitrc.default /home/pi/.xinitrc
sudo cp -r ./moode/lib/* /lib
sudo cp -r ./moode/usr/* /usr
sudo cp -r ./moode/var/* /var
sudo cp -r ./moode/www/* /var/www

sudo chmod 0755 /home/pi/*.sh
sudo chmod 0755 /home/pi/*.php
sudo chmod 0755 /var/www/command/*

sudo sqlite3 /var/local/www/db/moode-sqlite3.db "CREATE TRIGGER ro_columns BEFORE UPDATE OF param, value, [action] ON cfg_hash FOR EACH ROW BEGIN SELECT RAISE(ABORT, 'read only'); END;"
sudo sqlite3 /var/local/www/db/moode-sqlite3.db "update cfg_system set value='Emerald' where param='accent_color'"

3. Permissions for service files

# MPD
sudo chmod 0755 /etc/init.d/mpd
sudo chmod 0644 /lib/systemd/system/mpd.service
sudo chmod 0644 /lib/systemd/system/mpd.socket
# Bluetooth
sudo chmod 0666 /etc/bluealsaaplay.conf
sudo chmod 0644 /etc/systemd/system/bluealsa-aplay@.service
sudo chmod 0644 /etc/systemd/system/bluealsa.service
sudo chmod 0644 /lib/systemd/system/bluetooth.service
sudo chmod 0755 /usr/local/bin/a2dp-autoconnect
# Rotenc
sudo chmod 0644 /lib/systemd/system/rotenc.service
# Udev
sudo chmod 0644 /etc/udev/rules.d/*
# Localui
sudo chmod 0644 /lib/systemd/system/localui.service
# SSH term server
sudo chmod 0644 /lib/systemd/system/shellinabox.service

4. Services are started by moOde Worker so lets disable them here.

sudo systemctl daemon-reload
sudo systemctl disable bluealsa
sudo systemctl disable mpd.service
sudo systemctl disable mpd.socket
sudo systemctl disable rotenc.service

# The binaries will not have been installed yet, but let's disable the services here
sudo chmod 0644 /lib/systemd/system/squeezelite.service
sudo systemctl disable squeezelite
sudo chmod 0644 /lib/systemd/system/upmpdcli.service
sudo systemctl disable upmpdcli.service

5. Reset permissions
sudo chmod -R 0755 /var/www
sudo chmod -R 0755 /var/local/www
sudo chmod -R 0777 /var/local/www/db
sudo chmod -R ug-s /var/local/www
sudo chmod -R 0755 /usr/local/bin

6. Initial permissions for certain files. These also get set during moOde Worker startup.
sudo chmod 0777 /var/local/www/playhistory.log
sudo chmod 0777 /var/local/www/currentsong.txt
sudo touch /var/local/www/libcache.json
sudo chmod 0777 /var/local/www/libcache.json

# SR5
sudo reboot

////////////////////////////////////////////////////////////////
//
// STEP 9 - Alsaequal
//
////////////////////////////////////////////////////////////////

NOTE: The amixer command below will generate the alsaequal bin file.

sudo amixer -D alsaequal > /dev/null

sudo chmod 0755 /usr/local/bin/alsaequal.bin
sudo chown mpd:audio /usr/local/bin/alsaequal.bin
sudo rm /usr/share/alsa/alsa.conf.d/equal.conf

mpc enable only 1

////////////////////////////////////////////////////////////////
//
// STEP 10 - Optionally squash /var/www
//
////////////////////////////////////////////////////////////////

NOTE: This is optional but highly recommended for performance/reliability

sudo -i
echo "/var/local/moode.sqsh   /var/www        squashfs        ro,defaults     0       0" >> /etc/fstab
logout

cd ~
sudo rm /var/local/moode.sqsh
sudo mksquashfs /var/www /var/local/moode.sqsh

sudo rm -rf /var/www/*
sync

# SR6
sudo reboot

////////////////////////////////////////////////////////////////
//
// STEP 11 - Optionally install updated Linux Kernel
//
////////////////////////////////////////////////////////////////

# 4.19.49
echo "y" | sudo PRUNE_MODULES=1 rpi-update ce9a76ebe12cfa9cd76d15be7684af93632365f6
# 4.19.46
echo "y" | sudo PRUNE_MODULES=1 rpi-update f5e1ff99d6600fcc6d869a8c4fb63a5bb3a3e824
# 4.19.40
echo "y" | sudo PRUNE_MODULES=1 rpi-update 6cb1da772a8c56f44591bec904046b15f1126949
# 4.19.34
echo "y" | sudo PRUNE_MODULES=1 rpi-update 99c274691c07480762dcda91a0ebfe3c4f519307
# Fix for missing 4.19.y regulatory.db files
sudo cp ./moode/other/firmware/regulatory.db* /lib/firmware

# 4.14.98
echo "y" | sudo PRUNE_MODULES=1 rpi-update a08ece3d48c3c40bf1b501772af9933249c11c5b

# cleanup
sudo rm -rf /lib/modules.bak
sudo rm -rf /boot.bak
sudo apt-get clean

# SR7
sudo reboot

////////////////////////////////////////////////////////////////
//
// STEP 12 - Launch and configure moOde!
//
////////////////////////////////////////////////////////////////

1. Initial configuration

a. http://moode
b. Music Tab, Browse button, Default Playlist, Add
c. Menu, Configure, Sources, UPDATE mpd database
d. Menu, Audio, Mpd options, EDIT SETTINGS, APPLY
e. Menu, System, Set timezone
f. Clear system logs, YES
g. Compact sqlite database, YES
h. Keyboard
i. Layout

2. Verification

a) Playback tab
b) Scroll to the last item which should be the Stereo Test track
c) Click to begin play
d) Menu, Audio info
e) Verify Output stream is 16 bit 48 kHz

////////////////////////////////////////////////////////////////
//
// STEP 13 - Final prep for image
//
////////////////////////////////////////////////////////////////

1. Optionally check the boot partition.

NOTE: Run these commands one at a time.

If the message "There are differences between boot sector and its backup" appears,
enter 1 "Copy original to backup", then y to "Perform changes ?"

sudo umount /boot
sudo dosfsck -tawl /dev/mmcblk0p1
sudo dosfsck -r /dev/mmcblk0p1
sudo dosfsck -V /dev/mmcblk0p1
sudo mount /boot

2. Reset the network config to defaults

*** IMPORTANT! ***

Don't forget to do this!

sudo rm /var/lib/dhcpcd5/*

sudo cp ./moode/network/interfaces.default /etc/network/interfaces

## NOTE: if you created a wpa_supplicant.conf file back in STEP 1 to run the
## build over a WiFi connection then don't copy the wpa_supplicant.conf file.
sudo cp ./moode/network/wpa_supplicant.conf.default /etc/wpa_supplicant/wpa_supplicant.conf

sudo cp ./moode/network/dhcpcd.conf.default /etc/dhcpcd.conf
sudo cp ./moode/network/hostapd.conf.default /etc/hostapd/hostapd.conf

5. Shut down

# SR8
sudo poweroff

NOTE: Resetting the network config allows the moodecfg.txt automation file to be used to automatically change the
host name and other names at first boot. See the file /var/www/setup.txt for more information on this feature.

################################################################
#
#
# Install additional components
#
#
################################################################

////////////////////////////////////////////////////////////////
//
// COMPONENT 1 - MiniDLNA
//
////////////////////////////////////////////////////////////////

sudo apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install minidlna
sudo systemctl disable minidlna

////////////////////////////////////////////////////////////////
//
// COMPONENT 2 - Auto-shuffle
//
////////////////////////////////////////////////////////////////

cd ~
sudo git clone https://github.com/Joshkunz/ashuffle.git
cd ashuffle
sudo make
cd ~
sudo cp ./ashuffle/ashuffle /usr/local/bin
sudo rm -rf ./ashuffle

////////////////////////////////////////////////////////////////
//
// COMPONENT 3 - MPD Audio Scrobbler
//
////////////////////////////////////////////////////////////////

cd ~
sudo git clone https://github.com/hrkfdn/mpdas
cd mpdas
sudo make
sudo cp ./mpdas /usr/local/bin
cd ~
sudo rm -rf ./mpdas
sudo cp ./moode/usr/local/etc/mpdasrc.default /usr/local/etc/mpdasrc
sudo chmod 0755 /usr/local/etc/mpdasrc

////////////////////////////////////////////////////////////////
//
// COMPONENT 4A - Shairport-sync
//
////////////////////////////////////////////////////////////////

sudo apt-get -y install autoconf libtool libdaemon-dev libasound2-dev libpopt-dev libconfig-dev \
avahi-daemon libavahi-client-dev libssl-dev libsoxr-dev

sudo cp ./moode/other/shairport-sync/shairport-sync-3.3.1-3615b99.zip ./
sudo unzip ./shairport-sync-3.3.1-3615b99.zip
cd ./shairport-sync-3.3.1


sudo autoreconf -i -f
sudo ./configure --with-alsa --with-avahi --with-ssl=openssl --with-soxr --with-metadata --with-stdout --with-systemd --with-dbus-interface --sysconfdir=/etc
sudo make
sudo make install
sudo rm -f /lib/systemd/system/shairport-sync.service
sudo rm -f /usr/local/etc/shairport-sync.conf.sample
sudo cp ./moode/etc/dbus-1/system.d/shairport-sync-dbus.conf /etc/dbus-1/system.d
sudo cp ./moode/etc/shairport-sync.conf /etc
cd ~
sudo rm -rf ./shairport-sync-*

////////////////////////////////////////////////////////////////
//
// COMPONENT 4B - Librespot
//
////////////////////////////////////////////////////////////////

# The procedure for librespot is to compile it on armv6l architecture (Pi-1B | Zero | Zero W) because
# this binary also runs equally well on armv7l (Pi-2B | 3B | 3A+ | 3B+).

#You can uninstall at any time with rustup self uninstall and these changes will be reverted.
cd ~
rustup self uninstall

# Install the rust compiler and cargo package manager. Choose #1 when prompted.
cd ~
curl https://sh.rustup.rs -sSf | sh
sudo reboot

# Compile librespot
cd ~
sudo apt-get -y install portaudio19-dev

sudo cp ./moode/other/librespot/librespot-master-daeeeaa.zip ./
unzip ./librespot-master-daeeeaa.zip
cd ./librespot-master

cargo build --release --features alsa-backend
# copy binary
sudo cp target/release/librespot /usr/local/bin/librespot
cd ~

sudo rm -rf librespot-master
sudo rm -f ./librespot-daeeeaa.zip

////////////////////////////////////////////////////////////////
//
// COMPONENT 5 - Squeezelite
//
////////////////////////////////////////////////////////////////

sudo cp ./moode/other/squeezelite/squeezelite-1.8.7-1052.zip ./
sudo unzip ./squeezelite-1.8.7-1052.zip
cd ./squeezelite-master/
export CFLAGS="-O3 -march=native -mcpu=native -DDSD -DRESAMPLE -DGPIO -fno-fast-math -mfloat-abi=hard -pipe -fPIC"
cat ./scripts/squeezelite-ralphy-dsd.patch | patch -p 0
make
sudo cp ./squeezelite /usr/local/bin/
cd ~
sudo rm -rf ./squeezelite-master/

////////////////////////////////////////////////////////////////
//
// COMPONENT 6 - Upmpdcli
//
////////////////////////////////////////////////////////////////

// Enjoy a Coffee and listen to some Tunes while the compiles run :-)

1. Dev libraries

sudo apt-get -y install libmicrohttpd-dev libexpat1-dev \
libxml2-dev libxslt1-dev libjsoncpp-dev python-requests python-pip

2. Libupnp jfd5

cd ~
sudo cp ./moode/other/upmpdcli/libupnp-1.6.20.jfd5.tar.gz ./
sudo tar xfz ./libupnp-1.6.20.jfd5.tar.gz
cd libupnp-1.6.20.jfd5
./configure --prefix=/usr --sysconfdir=/etc
sudo make
sudo make install
cd ~
sudo rm -rf ./libupnp-1.6.20.jfd5
sudo rm libupnp-1.6.20.jfd5.tar.gz

3. Libupnpp

sudo cp ./moode/other/upmpdcli/libupnpp-0.16.0.tar.gz ./
sudo tar xfz ./libupnpp-0.16.0.tar.gz
cd libupnpp-0.16.0
./configure --prefix=/usr --sysconfdir=/etc
sudo make
sudo make install
cd ~
sudo rm -rf ./libupnpp-0.16.0
sudo rm libupnpp-0.16.0.tar.gz

4. Upmpdcli

sudo cp ./moode/other/upmpdcli/upmpdcli-code-1.2.16.tar.gz ./
sudo tar xfz ./upmpdcli-code-1.2.16.tar.gz
cd upmpdcli-code
./autogen.sh
./configure --prefix=/usr --sysconfdir=/etc
sudo make
sudo make install
cd ~
sudo rm -rf ./upmpdcli-code-1.2.16
sudo rm upmpdcli-code-1.2.16.tar.gz

sudo useradd upmpdcli
sudo cp ./moode/lib/systemd/system/upmpdcli.service /lib/systemd/system
sudo cp ./moode/etc/upmpdcli.conf /etc
sudo chmod 0644 /etc/upmpdcli.conf
sudo systemctl daemon-reload
sudo systemctl disable upmpdcli

5. upexplorer

NOTE: This also installs a bunch of other utils

sudo cp -r ./moode/other/libupnppsamples-code/ ./
cd libupnppsamples-code
sudo ./autogen.sh
sudo ./configure
sudo make
sudo make install
cd ~
sudo rm -rf ./libupnppsamples-code

6. Patch for upmpdcli gmusic plugin
sudo cp ./moode/other/upmpdcli/session.py /usr/share/upmpdcli/cdplugins/gmusic

////////////////////////////////////////////////////////////////
//
// COMPONENT 7 - Optionally install gmusicapi
//
////////////////////////////////////////////////////////////////

NOTE: This component enables access to Google Play Music service via UPnP renderer.
      If its not installed, the Google Play section in UPnP config screen will not be present.

sudo pip install gmusicapi

////////////////////////////////////////////////////////////////
//
// COMPONENT 8 - Local UI display
//
////////////////////////////////////////////////////////////////

1. Install xserver. Perform this step separately from the rest.

sudo apt-get -y install xinit xorg lsb-release xserver-xorg-legacy chromium-browser libgtk-3-0

2. Permissions, clean up and service config

sudo sed -i "s/allowed_users=console/allowed_users=anybody/" /etc/X11/Xwrapper.config
sudo apt-get clean
sudo systemctl daemon-reload
sudo systemctl disable localui

4. Configure Chrome Browser

NOTE: These steps are performed AFTER actually starting local display via System config,
rebooting and then accessing moOde on the local display.

a. Connect a keyboard.
b. Press Ctrl-t to open a separate instance of Chrome Browser.
c. Enter url chrome://flags and scroll down to Overlay Scrollbars and enable the setting.
d. Optionally, enter url chrome://extensions and install the xontab virtual keyboard extension.

////////////////////////////////////////////////////////////////
//
// COMPONENT 9 - Allo Piano 2.1 Firmware
//
////////////////////////////////////////////////////////////////

cd ~
wget https://github.com/allocom/piano-firmware/archive/master.zip
sudo unzip -q master.zip
sudo rm ./master.zip
sudo cp -r ./piano-firmware-master/lib/firmware/allo /lib/firmware
sudo rm -rf ./piano-firmware-master

////////////////////////////////////////////////////////////////
//
// FINAL - Clean up
//
////////////////////////////////////////////////////////////////

cd ~
sudo apt-get clean
sudo /var/www/command/util.sh clear-syslogs
mpc update
#sleep 10
sudo reboot

################################################################
#
#
# Appendix
#
#
################################################################

////////////////////////////////////////////////////////////////
//
// Squashfs procedures
//
////////////////////////////////////////////////////////////////

1. SQUASH /var/www

sudo -i
echo "/var/local/moode.sqsh   /var/www        squashfs        ro,defaults     0       0" >>/etc/fstab
logout

cd ~
sudo rm /var/local/moode.sqsh
sudo mksquashfs /var/www /var/local/moode.sqsh

sudo rm -rf /var/www/*
sync

sudo reboot

2. UNSQUASH /var/www

sudo killall -s 9 watchdog.sh
sudo systemctl stop nginx
sudo systemctl stop php7.0-fpm
sudo umount /var/www

sudo rmdir /var/www
sudo unsquashfs -d /var/www /var/local/moode.sqsh
sync

sudo sed -i /moode.sqsh/d /etc/fstab
sudo rm /var/local/moode.sqsh

sudo reboot

////////////////////////////////////////////////////////////////
//
// SD Card procedures (Mac OSX)
//
////////////////////////////////////////////////////////////////


1. Write SD Card to image file with truncation to the root partition end blk.

moOde 5.0 sudo fdisk -l
-----------------------
Device         Boot Start     End Sectors  Size Id Type
/dev/mmcblk0p1       8192   98045   89854 43.9M  c W95 FAT32 (LBA)
/dev/mmcblk0p2      98304 6242303 6144000    3G 83 Linux

Use end block + 1 as the block count in dd

diskutil list
diskutil unmountDisk /dev/disk3
sudo dd if=/dev/disk3 of=/Users/Lt1user/Documents/moode.img count=6242304 bs=512
diskutil eject /dev/disk3

2. Write image to SD Card.

diskutil list
diskutil unmountDisk /dev/disk3
sudo dd if=/Users/Lt1user/Documents/moode.img of=/dev/rdisk3 bs=1m
diskutil eject /dev/disk3

////////////////////////////////////////////////////////////////
//
// SD Card procedures (Windows)
//
////////////////////////////////////////////////////////////////

NOTE: The latest version of Win32diskImager v1.0 now has a setting where you can
select to read only allocated partitions. It is a free download from Sourceforge.

Download it using the link below.
https://sourceforge.net/projects/win32diskimager/

Assuming STEP 2 was performed to resize the root partition to 3GB, the resulting
moode.img file will only be 3GB in size. This will compress down to about 1GB.

################################################################
#
# END
#
################################################################
