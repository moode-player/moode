################################################################################
#
#  Build Recipe v2.36 2021-12-17
#
#  moOde 7.6.1 2021-12-17
#  - Based on RaspiOS Buster Lite 2020-12-02 (10.6)
#  - Based on Linux kernel 5.4.77 build #1371
#
#  - NOTE: Image prep and build is Linux and Ethernet only
#
#  These instructions are written for Linux Enthusiasts and System Integrators
#  to provide a recipe for making a custom OS for running moOde audio player.
#
#  Unless otherwise noted or if a command requires user interaction, groups of
#  commands can be run in batch.
#
#  (C) Tim Curtis 2017 http://moodeaudio.org
#
################################################################################

////////////////////////////////////////////////////////////////////////////////
//
// STEP 1 - Modify Raspberry Pi OS Lite and create a new base image
//
////////////////////////////////////////////////////////////////////////////////


1. Download Raspberry Pi OS Lite 2020-12-04 (Buster)
wget http://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2020-12-04/2020-12-02-raspios-buster-armhf-lite.zip
sudo unzip -q 2020-12-02-raspios-buster-armhf-lite.zip
sudo rm 2020-12-02-raspios-buster-armhf-lite.zip

2. Mount the boot and root partitions
LOOPDEV=$(sudo losetup -f)
sudo losetup -P $LOOPDEV 2020-12-02-raspios-buster-armhf-lite.img
sudo mkdir /mnt/p1
sudo mkdir /mnt/p2
sudo mount -t vfat "$LOOPDEV"p1 /mnt/p1
sudo mount -t ext4 "$LOOPDEV"p2 /mnt/p2

3. Enable SSH
sudo touch /mnt/p1/ssh

4. Remove Auto-resize task
sudo sed -i "s/init=.*//" /mnt/p1/cmdline.txt
sudo sed -i "s/quiet.*//" /mnt/p1/cmdline.txt
sudo rm /mnt/p2/etc/init.d/resize2fs_once

5. Configure to use standard interface names
sudo sed -i "s/^/net.ifnames=0 /" /mnt/p1/cmdline.txt

6. Cleanup
sudo losetup -D
sudo umount /mnt/p1
sudo umount /mnt/p2
sudo rmdir /mnt/p1
sudo rmdir /mnt/p2

7. Install the modified .img file to an SD Card

8. Power off
# SR1
sudo poweroff

////////////////////////////////////////////////////////////////////////////////

//
// STEP 2 - Expand the root partition to 3.5GB
//
////////////////////////////////////////////////////////////////////////////////


1. Insert the SD Card into a Raspberry Pi and POWER UP.

2. Change the current password (raspberry) to moodeaudio and the host name to moode.

ssh pi@raspberrypi (pwd=raspberry)

echo "pi:moodeaudio" | sudo chpasswd
sudo sed -i "s/raspberrypi/moode/" /etc/hostname
sudo sed -i "s/raspberrypi/moode/" /etc/hosts

3. Change timezone to local time zone

sudo timedatectl set-timezone "America/Detroit"

4. Download moOde application sources and configs.

//
// NOTE: We download the Sources here in order to extract resizefs.sh and other files.
//

cd ~
wget http://moodeaudio.org/downloads/src/moode-r761.zip
unzip -p -q ./moode-r761.zip moode/www/command/resizefs.sh > ./resizefs.sh
unzip -p -q ./moode-r761.zip moode/boot/config.txt.default > ./config.txt.default
unzip -p -q ./moode-r761.zip moode/boot/moodecfg.ini.default > ./moodecfg.ini.default

5. Expand the root partition to 3.5GB.

sudo chmod 0755 ./resizefs.sh
sudo sed -i "/PART_END=/c\PART_END=+4000M" ./resizefs.sh
sudo ./resizefs.sh start
sudo cp ./config.txt.default /boot/config.txt
sudo cp ./moodecfg.ini.default /boot/
sudo rm ./resizefs.sh
sudo rm ./config.txt.default
sudo rm ./moodecfg.ini.default

# SR1
sudo reboot

////////////////////////////////////////////////////////////////////////////////

//
// STEP 3 - Install core packages
//
////////////////////////////////////////////////////////////////////////////////


1. Unzip moOde release
unzip -o -q ./moode-r761.zip
rm -f ./moode-r761.zip

2. Basic optimizations

ssh pi@moode (pwd=moodeaudio)

sudo dphys-swapfile swapoff
sudo dphys-swapfile uninstall
sudo systemctl disable dphys-swapfile
sudo systemctl disable cron.service
sudo systemctl enable rpcbind
sudo systemctl set-default multi-user.target
sudo systemctl stop apt-daily.timer
sudo systemctl disable apt-daily.timer
sudo systemctl mask apt-daily.timer
sudo systemctl stop apt-daily-upgrade.timer
sudo systemctl disable apt-daily-upgrade.timer
sudo systemctl mask apt-daily-upgrade.timer

2. Install core packages.

# NOTE: run these two commands separately
#sudo apt-get update --allow-releaseinfo-change
sudo apt-get update
sudo apt-get -y upgrade

# SR2
sudo reboot

#sudo apt-get update --allow-releaseinfo-change
sudo apt-get update

sudo apt-get -y install rpi-update php-fpm nginx sqlite3 php-sqlite3 php7.3-gd mpc \
    bs2b-ladspa libbs2b0 libasound2-plugin-equal telnet automake sysstat squashfs-tools shellinabox samba smbclient ntfs-3g \
    exfat-fuse git inotify-tools ffmpeg avahi-utils ninja-build python3-setuptools libmediainfo0v5 libmms0 libtinyxml2-6a \
    libzen0v5 libmediainfo-dev libzen-dev winbind libnss-winbind djmount haveged python3-pip xfsprogs triggerhappy zip id3v2 \
    cmake dos2unix php-yaml sox flac nmap libtool-bin

# meson
sudo cp ./moode/other/meson-ninja/meson-0.59.2.tar.gz ./
sudo tar xfz /meson-0.59.2.tar.gz
cd meson-0.59.2
sudo python3 setup.py install
cd ~
sudo rm -rf meson*

# mediainfo
sudo cp ./moode/other/mediainfo/mediainfo-18.12 /usr/local/bin/mediainfo

# alsacap
sudo cp ./moode/other/alsacap/alsacap /usr/local/bin

# udisks-glue libs
sudo apt-get -y install libatasmart4 libdbus-glib-1-2 libgudev-1.0-0 \
	libsgutils2-2 libdevmapper-event1.02.1 libconfuse-dev libdbus-glib-1-dev

# udisks-glue packages
sudo dpkg -i ./moode/other/udisks-glue/liblvm2app2.2_2.02.168-2_armhf.deb
sudo dpkg -i ./moode/other/udisks-glue/udisks_1.0.5-1+b1_armhf.deb

# udisks-glue pre-compiled binary
sudo cp ./moode/other/udisks-glue/udisks-glue-1.3.5-70376b7 /usr/bin/udisks-glue

# udevil (pkg includes devmon)
sudo apt-get -y install udevil

# autoremove php 7.2
sudo apt-get -y autoremove

# Systemd
sudo systemctl enable haveged
sudo systemctl disable shellinabox
sudo systemctl disable phpsessionclean.service
sudo systemctl disable phpsessionclean.timer
sudo systemctl disable udisks2
sudo systemctl disable triggerhappy

////////////////////////////////////////////////////////////////////////////////

//
// STEP 4 - Install enhanced networking
//
////////////////////////////////////////////////////////////////////////////////


1. Install Host AP mode

sudo apt-get -y install dnsmasq hostapd

sudo systemctl daemon-reload
sudo systemctl unmask hostapd
sudo systemctl disable hostapd
sudo systemctl disable dnsmasq

2. Install Bluetooth

sudo apt-get -y install bluez-firmware pi-bluetooth \
dh-autoreconf expect libdbus-1-dev libortp-dev libbluetooth-dev libasound2-dev \
libusb-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev libsbc1 libsbc-dev

# Compile bluez 5.50
# 2018-06-01 commit 8994b7f2bf817a7fea677ebe18f690a426088367
sudo cp ./moode/other/bluetooth/bluetooth/bluez-5.50.tar.xz ./
sudo tar xf bluez-5.50.tar.xz >/dev/null
cd bluez-5.50
sudo autoreconf --install
sudo ./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var --enable-library
sudo make
sudo make install
cd ..
sudo rm -rf ./bluez-5.50*

# Delete symlink and bin for old bluetoothd
sudo rm /usr/sbin/bluetoothd
sudo rm -rf /usr/lib/bluetooth
# Create symlink for new bluetoothd
sudo ln -s /usr/libexec/bluetooth/bluetoothd /usr/sbin/bluetoothd

# Compile bluez-alsa 3.0.0
sudo cp ./moode/other/bluetooth/bluez-alsa-3.0.0.zip ./
sudo unzip -q bluez-alsa-3.0.0.zip
cd bluez-alsa-3.0.0
# NOTE: Ignore warnings from autoreconf and configure
sudo autoreconf --install
sudo mkdir build
cd build
sudo ../configure --disable-hcitop --with-alsaplugindir=/usr/lib/arm-linux-gnueabihf/alsa-lib
sudo make
sudo make install
cd ../..
sudo rm -rf bluez-alsa-3.0.0

3. Services are started by moOde Worker so lets disable them here.

sudo systemctl daemon-reload
sudo systemctl disable bluetooth.service
sudo systemctl disable hciuart.service

4. Finish up

sudo mkdir -p /var/run/bluealsa
sudo sync
sudo apt-get clean

# SR3
sudo reboot

////////////////////////////////////////////////////////////////////////////////

//
// STEP 5 - Install Rotary encoder driver
//
////////////////////////////////////////////////////////////////////////////////


1a. WiringPi from sources

# Remove 2.52 version installed from .deb file
sudo dpkg -P wiringpi

# NOTE: Ignore warnings during build
sudo cp ./moode/other/wiringpi/wiringPi-2.50-36fb7f1.tar.gz ./
sudo tar xfz ./wiringPi-2.50-36fb7f1.tar.gz
cd wiringPi-36fb7f1
sudo ./build
cd ~/
sudo rm -rf ./wiringPi*

1b. WiringPi from .deb package

# Remove 2.50 version compiled from sources
sudo rm /usr/local/lib/libwiringPi*
sudo rm /usr/local/bin/gpio

cd /usr/local/include
sudo rm ads1115.h ds1302.h lcd128x64.h maxdetect.h mcp23017.h mcp23x08.h mcp4802.h piGlow.h scrollPhat.h softTone.h wiringPiSPI.h \
bmp180.h ds18b20.h lcd.h mcp23008.h mcp23s08.h mcp3002.h pcf8574.h piNes.h sn3218.h sr595.h wiringSerial.h drcNet.h \
gertboard.h max31855.h mcp23016.h mcp23s17.h mcp3004.h pcf8591.h pseudoPins.h softPwm.h wiringPi.h wiringShift.h drcSerial.h \
htu21d.h max5322.h mcp23016reg.h mcp23x0817.h mcp3422.h piFace.h rht03.h softServo.h wiringPiI2C.h wpiExtensions.h
cd ~/

# Install 2.52 from deb package
sudo cp ./moode/other/wiringpi/wiringpi-latest.deb ./
sudo dpkg -i wiringpi-latest.deb
sudo rm ./wiringpi-latest.deb

1c. RPi-GPIO 0.7.0 and musicpd packages for Python3 and rotenc.py

sudo pip3 install RPi.GPIO
sudo pip3 install python-musicpd

2. Rotary encoder driver

2a. Compile and install C version of the driver.
NOTE: This version does not work on Pi-4B because of wiringPi / 4B compatibility issues which may or may not be resolved due
to wiringPi being deprecated by the maintainer on 2019-08-06 http://wiringpi.com/wiringpi-deprecated/

sudo cp ./moode/other/rotenc/rotenc.c ./
sudo gcc -std=c99 rotenc.c -orotenc -lwiringPi
sudo cp ./rotenc /usr/local/bin/rotenc_c
sudo rm ./rotenc*

2b. Install Python version of the driver (default)

sudo cp ./moode/other/rotenc/rotenc.py /usr/local/bin/rotenc

////////////////////////////////////////////////////////////////////////////////

//
// STEP 6 - Compile and install MPD and MPC
//
////////////////////////////////////////////////////////////////////////////////


1. Create MPD runtime environment.

sudo useradd mpd
sudo mkdir /var/lib/mpd
sudo mkdir /var/lib/mpd/music
sudo mkdir /var/lib/mpd/playlists
sudo touch /var/lib/mpd/state
sudo chown -R mpd:audio /var/lib/mpd
sudo mkdir /var/log/mpd
sudo touch /var/log/mpd/log
sudo chmod 644 /var/log/mpd/log
sudo chown -R mpd:audio /var/log/mpd
sudo cp ./moode/mpd/mpd.conf.default /etc/mpd.conf
sudo chown mpd:audio /etc/mpd.conf
sudo chmod 0666 /etc/mpd.conf

2. Install MPD dev libs.

# Packages
sudo apt-get -y install \
libyajl-dev \
libasound2-dev \
libavahi-client-dev \
libavcodec-dev \
libavformat-dev \
libbz2-dev \
libcdio-paranoia-dev \
libcurl4-gnutls-dev \
libfaad-dev \
libflac-dev \
libglib2.0-dev \
libicu-dev \
libid3tag0-dev \
libiso9660-dev \
libmad0-dev \
libmpdclient-dev \
libmpg123-dev \
libmp3lame-dev \
libshout3-dev \
libsoxr-dev \
libsystemd-dev \
libvorbis-dev \
libwavpack-dev \
libwrap0-dev \
libzzip-dev \
libpcre++-dev

# Boost 1.68
sudo cp ./moode/other/boost/boost_1.68_headers.tar.gz /
sudo cp ./moode/other/boost/boost_1.68_libraries.tar.gz /
cd /
sudo tar xfz ./boost_1.68_headers.tar.gz
sudo tar xfz ./boost_1.68_libraries.tar.gz
sudo rm ./boost_*.gz
cd ~

3. Download MPD 0.23.4 sources and prep for compile.
NOTE: Compiling from sources in this recipe does not include the patch for Selective Resampling.
      The instructions for the patch build are in ./moode/other/mpd/_build_mpd.txt

# OPTIONALLY install pre-compiled patched binary and skip to STEP 7
sudo cp ./moode/other/mpd/mpd-0.23.4_p0x3 /usr/local/bin/mpd
sudo reboot

sudo wget http://www.musicpd.org/download/mpd/0.23/mpd-0.23.4.tar.xz
sudo tar xf mpd-0.23.4.tar.xz
cd mpd-0.23.4
sudo meson . output/release --buildtype=release -Db_ndebug=true

4. Configure compile options.

sudo meson configure \
-Dalsa=enabled \
-Dbzip2=enabled \
-Dcurl=enabled \
-Ddatabase=true \
-Ddsd=true \
-Dffmpeg=enabled \
-Dfaad=enabled \
-Dflac=enabled \
-Dhttpd=true \
-Did3tag=enabled \
-Dlame=enabled \
-Dlibmpdclient=enabled \
-Dmad=enabled \
-Dmpg123=enabled \
-Dpipe=true \
-Drecorder=true \
-Dshout=enabled \
-Dsoxr=enabled \
-Dvorbis=enabled \
-Dwave_encoder=true \
-Dwavpack=enabled \
-Dzeroconf=avahi \
-Dpcre=enabled \
-Dzzip=enabled \
-Dao=disabled \
-Daudiofile=disabled \
-Ddbus=disabled \
-Dexpat=disabled \
-Dfluidsynth=disabled \
-Dgme=disabled \
-Dipv6=disabled \
-Djack=disabled \
-Dlibsamplerate=disabled \
-Dnfs=disabled \
-Doss=disabled \
-Dpulse=disabled \
-Dsidplay=disabled \
-Dsmbclient=disabled \
-Dsndfile=disabled \
-Dsqlite=disabled \
-Dudisks=disabled \
-Dupnp=disabled \
-Dwildmidi=disabled \
-Dsoundcloud=disabled \
-Dtidal=disabled \
-Dqobuz=disabled
output/release

5. Compile and install MPD

sudo ninja -C output/release
sudo ninja -C output/release install
cd ~
sudo rm -rf ./mpd*

sudo apt-get clean
sudo apt-get -y autoremove

6. Compile and install MPC

sudo cp ./moode/other/mpd/mpc-0.33.tar.xz ./
sudo tar xf ./mpc-0.33.tar.xz

# Compile
cd mpc-0.33
sudo meson . output
sudo ninja -C output

# Install binary
sudo cp output/mpc /usr/bin/

7. Install updated libcurl3 (Fixes instability in this lib shipped in RaspiOS Buster)
sudo cp -r ./moode/other/libcurl3-gnutls/ ./
cd ./libcurl3-gnutls/
./install.sh
cd ~
sudo rm -rf libcurl3-gnutls/

# Cleanup
cd ~
sudo rm -rf ./mpc-0.33*

# SR4
sudo reboot

////////////////////////////////////////////////////////////////////////////////

//
// STEP 7 - Create moOde runtime environment
//
////////////////////////////////////////////////////////////////////////////////


1. Privileges

sudo -i
echo -e 'pi\tALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
echo -e 'www-data\tALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers
logout

2. Directories and files

# Dirs
sudo mkdir /var/local/www
sudo mkdir /var/local/www/commandw
sudo mkdir /var/local/www/imagesw
sudo mkdir /var/local/www/imagesw/toggle
sudo mkdir /var/local/www/db
sudo mkdir /var/local/php
sudo chmod -R 0755 /var/local/www
sudo mkdir /var/lib/mpd/music/RADIO
# Mount points
sudo mkdir /mnt/NAS
sudo mkdir /mnt/SDCARD
sudo mkdir /mnt/UPNP
# Symlinks
sudo ln -s /mnt/NAS /var/lib/mpd/music/NAS
sudo ln -s /mnt/SDCARD /var/lib/mpd/music/SDCARD
sudo ln -s /media /var/lib/mpd/music/USB
# Logs
sudo touch /var/log/moode.log
sudo chmod 0666 /var/log/moode.log
sudo touch /var/log/php_errors.log
sudo chmod 0666 /var/log/php_errors.log
# Files
sudo cp ./moode/mpd/sticker.sql /var/lib/mpd
sudo cp -r "./moode/other/sdcard/Stereo Test/" /var/lib/mpd/music/SDCARD/
sudo cp ./moode/network/interfaces.default /etc/network/interfaces

## NOTE: if you created a wpa_supplicant.conf file back in STEP 1 to run the
## build over a WiFi connection then don't copy the wpa_supplicant.conf file.
## When you reach STEP 12 open Network config and enter your SSID and Password then APPLY.
## This will create a new wpa_supplicant.conf file and also update the sql database.

sudo cp ./moode/network/wpa_supplicant.conf.default /etc/wpa_supplicant/wpa_supplicant.conf

sudo cp ./moode/network/dhcpcd.conf.default /etc/dhcpcd.conf
sudo cp ./moode/network/hostapd.conf.default /etc/hostapd/hostapd.conf
#sudo cp ./moode/var/local/www/db/moode-sqlite3.db.default /var/local/www/db/moode-sqlite3.db
sudo cat ./moode/var/local/www/db/moode-sqlite3.db.sql | sqlite3 /var/local/www/db/moode-sqlite3.db

# Permissions
sudo chmod 0777 /var/lib/mpd/music/RADIO
sudo chmod -R 0777 /var/local/www/db
sudo chown www-data:www-data /var/local/php
# Deletes
sudo rm -r /var/www/html
sudo rm /etc/update-motd.d/10-uname
sudo rm /etc/motd

////////////////////////////////////////////////////////////////////////////////

//
// STEP 8 - Install moOde sources and configs
//
////////////////////////////////////////////////////////////////////////////////


LIBCACHE_BASE=/var/local/www/libcache

1. Application sources and configs

# Ignore "no such file or directory" errors if they appear.
sudo rm /var/lib/mpd/music/RADIO/*
sudo rm -rf /var/local/www/imagesw/radio-logos/

sudo cp ./moode/mpd/RADIO/* /var/lib/mpd/music/RADIO
sudo cp ./moode/mpd/playlists/* /var/lib/mpd/playlists
sudo cp -r ./moode/etc/* /etc
sudo cp -r ./moode/home/* /home/pi
sudo mv /home/pi/dircolors /home/pi/.dircolors
sudo mv /home/pi/xinitrc.default /home/pi/.xinitrc
sudo cp -r ./moode/lib/* /lib
sudo cp -r ./moode/usr/* /usr
sudo cp -r ./moode/var/* /var
sudo cp -r ./moode/build/distr/var/www/* /var/www

sudo chmod 0755 /home/pi/*.sh
sudo chmod 0755 /home/pi/*.php
sudo chmod 0755 /var/www/command/*

sudo sqlite3 /var/local/www/db/moode-sqlite3.db "CREATE TRIGGER ro_columns BEFORE UPDATE OF param, value, [action] ON cfg_hash FOR EACH ROW BEGIN SELECT RAISE(ABORT, 'read only'); END;"
sudo sqlite3 /var/local/www/db/moode-sqlite3.db "update cfg_system set value='Emerald' where param='accent_color'"

3. Permissions for service files

# MPD
sudo chmod 0755 /etc/init.d/mpd
sudo chmod 0644 /lib/systemd/system/mpd.service
sudo chmod 0644 /lib/systemd/system/mpd.socket
# Bluetooth
sudo chmod 0666 /etc/bluealsaaplay.conf
sudo chmod 0644 /etc/systemd/system/bluealsa-aplay@.service
sudo chmod 0644 /etc/systemd/system/bluealsa.service
sudo chmod 0644 /lib/systemd/system/bluetooth.service
sudo chmod 0755 /usr/local/bin/a2dp-autoconnect
# Rotenc
sudo chmod 0644 /lib/systemd/system/rotenc.service
# Udev
sudo chmod 0644 /etc/udev/rules.d/*
# Localui
sudo chmod 0644 /lib/systemd/system/localui.service
# SSH term server
sudo chmod 0644 /lib/systemd/system/shellinabox.service

4. Services are started by moOde Worker so lets disable them here.

sudo systemctl daemon-reload
sudo systemctl disable bluealsa
sudo systemctl disable mpd.service
sudo systemctl disable mpd.socket
sudo systemctl disable rotenc.service

# The binaries will not have been installed yet, but let's disable the services here
sudo chmod 0644 /lib/systemd/system/squeezelite.service
sudo systemctl disable squeezelite
sudo chmod 0644 /lib/systemd/system/upmpdcli.service
sudo systemctl disable upmpdcli.service

5. Reset permissions
sudo chmod -R 0755 /var/www
sudo chmod -R 0755 /var/local/www
sudo chmod -R 0777 /var/local/www/db
sudo chmod -R ug-s /var/local/www
sudo chmod -R 0755 /usr/local/bin

6. Initial permissions for certain files. These also get set during moOde Worker startup.
sudo chmod 0777 /var/local/www/playhistory.log
sudo chmod 0777 /var/local/www/currentsong.txt
sudo touch $LIBCACHE_BASE"_all.json"
sudo touch $LIBCACHE_BASE"_folder.json"
sudo touch $LIBCACHE_BASE"_format.json"
sudo touch $LIBCACHE_BASE"_lossless.json"
sudo touch $LIBCACHE_BASE"_lossy.json"
sudo chmod 0777 $LIBCACHE_BASE"_*"

7. Permission for the 010_moode file
sudo chmod 0440 /etc/sudoers.d/010_moode

# SR5
sudo reboot

////////////////////////////////////////////////////////////////////////////////

//
// STEP 9a - Alsaequal and EqFa12p
//
////////////////////////////////////////////////////////////////////////////////


# Alsaequal
NOTE: The amixer command below will generate the alsaequal bin file.

sudo amixer -D alsaequal > /dev/null

sudo chmod 0755 /usr/local/bin/alsaequal.bin
sudo chown mpd:audio /usr/local/bin/alsaequal.bin
# stretch
#sudo rm /usr/share/alsa/alsa.conf.d/equal.conf
# buster
sudo rm /etc/alsa/alsa.conf.d/equal.conf

# EqFa12p
sudo cp ./moode/other/bitlab/caps/caps-features-eqfa12p_12_band_parametric_eq.zip ./
sudo unzip -q ./caps-features-eqfa12p_12_band_parametric_eq.zip
cd ./caps-features-eqfa12p_12_band_parametric_eq
sudo ./configure.py
sudo make
sudo make install
cd ..
sudo rm -rf ./caps-features-eqfa12p_12_band_parametric_eq*

mpc enable only 1

////////////////////////////////////////////////////////////////////////////////

//
// STEP 9b - CamillaDSP, CamillaGUI and alsa_cdsp
// NOTE: See readme.txt in other/camilladsp for more info
//
////////////////////////////////////////////////////////////////////////////////


# 9b.1a CamillaDSP + GUI build + install from source
CURR_DIR=`pwd`
cd ../camilladsp
# build distributables
# this step is interactive:
# when question ask choose 1
# if asked to  logout / login to update env (or do it manually) and run script again
bash ./buildplan_camilladsp.txt
# install distributables
bash ./_install.txt
rm -rf camilladsp.dev
cd $CURR_DIR

# 9b.1b CamillaDSP + GUI install prebuild
CURR_DIR=`pwd`
cd ../camilladsp
# install distributables
bash ./_install.txt
cd $CURR_DIR

# 9b.2a Alsa_cdsp build + install from source
sudo mkdir alsa_cdsp
sudo tar -xzf ./moode/other/alsa_dscp/alsa_cdsp-*.tgz --directory ./alsa_cdsp
cd alsa_cdsp
sudo make
sudo make install
sudo cd rm -rf ./alsa_cdsp

# 9b.2b Alsa_cdsp install prebuild
# sudo install -m 644 ./moode/other/alsa_cdsp/libasound_module_pcm_cdsp.so `pkg-config --variable=libdir alsa`/alsa-lib/

////////////////////////////////////////////////////////////////////////////////

//
// STEP 10 - Optionally squash /var/www
//
////////////////////////////////////////////////////////////////////////////////


NOTE: This is optional but highly recommended for performance/reliability

sudo -i
echo "/var/local/moode.sqsh   /var/www        squashfs        ro,defaults     0       0" >> /etc/fstab
logout

cd ~
sudo rm /var/local/moode.sqsh
sudo mksquashfs /var/www /var/local/moode.sqsh

sudo rm -rf /var/www/*
sync

# SR6
sudo reboot

////////////////////////////////////////////////////////////////////////////////

//
// STEP 11 - Optionally install updated Linux Kernel
//
////////////////////////////////////////////////////////////////////////////////


KERNEL=5.4.77
BUILD=#1371
echo "y" | sudo PRUNE_MODULES=1 rpi-update cc9ff6c7d1b9be5465c24c75941b049f94a6bd32

sudo rm -rf /lib/modules.bak
sudo rm -rf /boot.bak
sudo apt-get clean

# Install drivers for Allo USBridge Signature

# WiFi driver (Comfast CF-912AC, MrEngman stock)
sudo cp ./moode/other/allo/usbridge_sig/$KERNEL/8812au.ko-v7+ /lib/modules/$KERNEL-v7+/kernel/drivers/net/wireless/8812au.ko
sudo cp ./moode/other/allo/usbridge_sig/$KERNEL/8812au.ko-v7l+ /lib/modules/$KERNEL-v7l+/kernel/drivers/net/wireless/8812au.ko
sudo cp ./moode/other/allo/usbridge_sig/$KERNEL/8812au.ko-v8+ /lib/modules/$KERNEL-v8+/kernel/drivers/net/wireless/8812au.ko
sudo cp ./moode/other/allo/usbridge_sig/$KERNEL/8812au.conf /etc/modprobe.d/
sudo chmod 0644 /lib/modules/$KERNEL-v7+/kernel/drivers/net/wireless/8812au.ko
sudo chmod 0644 /lib/modules/$KERNEL-v7l+/kernel/drivers/net/wireless/8812au.ko
sudo chmod 0644 /lib/modules/$KERNEL-v8+/kernel/drivers/net/wireless/8812au.ko
sudo chmod 0644 /etc/modprobe.d/*.conf
# Eth/USB driver v2.0.0 (Allo enhanced)
sudo cp ./moode/other/allo/usbridge_sig/$KERNEL/ax88179_178a.ko-v7+ /lib/modules/$KERNEL-v7+/kernel/drivers/net/usb/ax88179_178a.ko
sudo cp ./moode/other/allo/usbridge_sig/$KERNEL/ax88179_178a.ko-v7l+ /lib/modules/$KERNEL-v7l+/kernel/drivers/net/usb/ax88179_178a.ko
sudo cp ./moode/other/allo/usbridge_sig/$KERNEL/ax88179_178a.ko-v8+ /lib/modules/$KERNEL-v8+/kernel/drivers/net/usb/ax88179_178a.ko
sudo chmod 0644 /lib/modules/$KERNEL-v7+/kernel/drivers/net/usb/ax88179_178a.ko
sudo chmod 0644 /lib/modules/$KERNEL-v7l+/kernel/drivers/net/usb/ax88179_178a.ko
sudo chmod 0644 /lib/modules/$KERNEL-v8+/kernel/drivers/net/usb/ax88179_178a.ko

# Install @bitlab enhanced pcm1794a 384K codec

sudo cp ./moode/other/bitlab/pcm1794a/$KERNEL/snd-soc-pcm1794a.ko-v7+ /lib/modules/$KERNEL-v7+/kernel/sound/soc/codecs/snd-soc-pcm1794a.ko
sudo cp ./moode/other/bitlab/pcm1794a/$KERNEL/snd-soc-pcm1794a.ko-v7l+ /lib/modules/$KERNEL-v7l+/kernel/sound/soc/codecs/snd-soc-pcm1794a.ko
sudo cp ./moode/other/bitlab/pcm1794a/$KERNEL/snd-soc-pcm1794a.ko-v8+ /lib/modules/$KERNEL-v8+/kernel/sound/soc/codecs/snd-soc-pcm1794a.ko
sudo chmod 0644 /lib/modules/$KERNEL-v7+/kernel/sound/soc/codecs/snd-soc-pcm1794a.ko
sudo chmod 0644 /lib/modules/$KERNEL-v7l+/kernel/sound/soc/codecs/snd-soc-pcm1794a.ko
sudo chmod 0644 /lib/modules/$KERNEL-v8+/kernel/sound/soc/codecs/snd-soc-pcm1794a.ko

# Install @bitlab enhanced aloop 384K driver

sudo cp ./moode/other/bitlab/aloop/$KERNEL/snd-aloop.ko-v7+ /lib/modules/$KERNEL-v7+/kernel/sound/drivers/snd-aloop.ko
sudo cp ./moode/other/bitlab/aloop/$KERNEL/snd-aloop.ko-v7l+ /lib/modules/$KERNEL-v7l+/kernel/sound/drivers/snd-aloop.ko
sudo cp ./moode/other/bitlab/aloop/$KERNEL/snd-aloop.ko-v8+ /lib/modules/$KERNEL-v8+/kernel/sound/drivers/snd-aloop.ko
sudo chmod 0644 /lib/modules/$KERNEL-v7+/kernel/sound/drivers/snd-aloop.ko
sudo chmod 0644 /lib/modules/$KERNEL-v7l+/kernel/sound/drivers/snd-aloop.ko
sudo chmod 0644 /lib/modules/$KERNEL-v8+/kernel/sound/drivers/snd-aloop.ko

sudo depmod $KERNEL-v7+
sudo depmod $KERNEL-v7l+
sudo depmod $KERNEL-v8+

# SR7
sudo reboot

////////////////////////////////////////////////////////////////////////////////

//
// STEP 12 - Launch and configure moOde!
//
////////////////////////////////////////////////////////////////////////////////


1. Initial configuration

a. http://moode
b. Music Tab, Browse button, Default Playlist, Add
c. Menu, Configure, Sources, UPDATE mpd database
d. Menu, Audio, Mpd options, EDIT SETTINGS, APPLY
e. Menu, System, Set timezone
f. Clear system logs, YES
g. Compact sqlite database, YES
h. Keyboard
i. Layout

2. Verification

a) Playback tab
b) Scroll to the last item which should be the Stereo Test track
c) Click to begin play
d) Menu, Audio info
e) Verify Output stream is 16 bit 48 kHz

////////////////////////////////////////////////////////////////////////////////

//
// STEP 13 - Final prep for image
//
////////////////////////////////////////////////////////////////////////////////


1. Optionally check the boot partition.

NOTE: Run these commands one at a time.

If the message "There are differences between boot sector and its backup" appears,
enter 1 "Copy original to backup", then y to "Perform changes ?"

sudo umount /boot
sudo dosfsck -tawl /dev/mmcblk0p1
sudo dosfsck -r /dev/mmcblk0p1
sudo dosfsck -V /dev/mmcblk0p1
sudo mount /boot

2. Reset the network config to defaults

*** IMPORTANT! ***

Don't forget to do this!

sudo rm /var/lib/dhcpcd5/*

sudo cp ./moode/network/interfaces.default /etc/network/interfaces

## NOTE: if you created a wpa_supplicant.conf file back in STEP 1 to run the
## build over a WiFi connection then don't copy the wpa_supplicant.conf file.
sudo cp ./moode/network/wpa_supplicant.conf.default /etc/wpa_supplicant/wpa_supplicant.conf

sudo cp ./moode/network/dhcpcd.conf.default /etc/dhcpcd.conf
sudo cp ./moode/network/hostapd.conf.default /etc/hostapd/hostapd.conf

5. Shut down

# SR8
sudo poweroff

NOTE: Resetting the network config allows the moodecfg.txt automation file to be used to automatically change the
host name and other names at first boot. See the file /var/www/setup.txt for more information on this feature.

################################################################################
#
#
# Install additional components
#
#
################################################################################

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 1 - MiniDLNA
//
////////////////////////////////////////////////////////////////////////////////

sudo apt-get -y install libjpeg-dev libsqlite3-dev libexif-dev

sudo cp ./moode/other/minidlna/minidlna-1.3.0.tar.gz ./
sudo tar -xzf ./minidlna-1.3.0.tar.gz
cd minidlna-1.3.0
sudo ./configure
sudo make
sudo mv ./minidlnad /usr/sbin/
cd ~
sudo rm -rf minidlna*

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 2 - Auto-shuffle
//
////////////////////////////////////////////////////////////////////////////////

cd ~
cp ./moode/other/ashuffle/ashuffle-3.11.1-armv6h-linux-gnueabihf /usr/local/bin/ashuffle

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 3 - Reserved for future use
//
////////////////////////////////////////////////////////////////////////////////

#cd ~

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 4A - Shairport-sync
//
////////////////////////////////////////////////////////////////////////////////

sudo apt-get -y install autoconf libtool libdaemon-dev libasound2-dev libpopt-dev libconfig-dev \
avahi-daemon libavahi-client-dev libssl-dev libsoxr-dev libmosquitto-dev

sudo cp ./moode/other/shairport-sync/shairport-sync-3.3.6-15fd1d0.zip ./
sudo unzip ./shairport-sync-3.3.6-15fd1d0.zip
cd ./shairport-sync-3.3.6


sudo autoreconf -i -f
sudo ./configure --with-alsa --with-avahi --with-ssl=openssl --with-soxr --with-metadata --with-mqtt-client --with-stdout --with-systemd --with-dbus-interface --sysconfdir=/etc
sudo make
sudo make install
sudo rm -f /lib/systemd/system/shairport-sync.service
sudo rm -f /usr/local/etc/shairport-sync.conf.sample
cd ~
sudo cp ./moode/etc/dbus-1/system.d/shairport-sync-dbus.conf /etc/dbus-1/system.d
sudo cp ./moode/etc/shairport-sync.conf /etc
sudo rm -rf ./shairport-sync-*

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 4B - Librespot
//
////////////////////////////////////////////////////////////////////////////////

# NOTE: armv7l librespot will segfault on armv6l but not vis versa. Therefore, the procedure
# described here will build only an armv6l librespot.

# NOTE: To uninstall
rustup self uninstall

# Install rust compiler, cargo package manager and portaudio dev lib.
# When prompted, enter the number 2 to choose '2) Customize installation'
#    At the 'Default host triple?' prompt, enter arm-unknown-linux-gnueabihf
#    At the next three prompts---'Default toolchain?', 'Profile?',and
#    'Modify PATH variable?'---just hit return
# rustup will report the current installation options are
#    default host triple: arm-unknown-linux-gnueabihf
#    default toolchain: stable
#    profile: default
#    modify PATH variable: yes
# When prompted this time through, enter the number 1 to choose '1) Proceed with installation (default)'

# Host tripple
arm-unknown-linux-gnueabihf

cd ~
# Needed to avoid OOM error when unpacking rustc
export RUSTUP_UNPACK_RAM=20000000
curl https://sh.rustup.rs -sSf | sh
sudo apt-get -y install portaudio19-dev

# Compile librespot
source $HOME/.cargo/env
sudo cp ./moode/other/librespot/librespot-0.3.1.zip ./
unzip -q ./librespot-0.3.1.zip
cd ./librespot-0.3.1
RUSTFLAGS=-Ccodegen-units=1 cargo build --release --features alsa-backend

# Copy binary
sudo cp target/release/librespot /usr/local/bin/librespot

# Cleanup
cd ~
sudo rm -rf librespot*

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 5 - Squeezelite
//
////////////////////////////////////////////////////////////////////////////////

sudo cp ./moode/other/squeezelite/squeezelite-1.9.7-1270.zip ./
sudo unzip -q ./squeezelite-1.9.7-1270.zip
cd ./squeezelite-master/
sudo sed -i '/OPTS/c\OPTS = -DRESAMPLE -DDSD -DGPIO -DRPI -DLINKALL -I./include -I/usr/local/include -s -O3 -march=armv6 -mfloat-abi=hard -mfpu=vfp' ./Makefile.rpi
sudo make --makefile=Makefile.rpi
sudo cp ./squeezelite /usr/local/bin/
cd ~
sudo rm -rf ./squeezelite*

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 6 - Upmpdcli
//
////////////////////////////////////////////////////////////////////////////////

1. Dev libraries

sudo apt-get -y install libmicrohttpd-dev libexpat1-dev \
libxml2-dev libxslt1-dev libjsoncpp-dev python-requests python-pip

2. Build

# Copy build directory
sudo ./dev.sh
cd ~
sudo cp -r ./moode/other/upmpdcli/ ./

# Make the packages
cd ./upmpdcli/
sudo ./build_upnp.sh

# Install the packages
sudo ./install_upnp.sh

# Cleanup
cd ~
sudo rm -rf ./upmpdcli



////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 8 - Local UI display
//
////////////////////////////////////////////////////////////////////////////////

1. Install xserver. Perform this step separately from the rest.

sudo apt-get -y install xinit xorg lsb-release xserver-xorg-legacy chromium-browser libgtk-3-0 libgles2

2. Permissions, clean up and service config

sudo sed -i "s/allowed_users=console/allowed_users=anybody/" /etc/X11/Xwrapper.config
sudo apt-get clean
sudo systemctl daemon-reload
sudo systemctl disable localui

4. Configure Chrome Browser

NOTE: These steps are performed AFTER actually starting local display via System config,
rebooting and then accessing moOde on the local display.

a. Connect a keyboard.
b. Press Ctrl-t to open a separate instance of Chrome Browser.
c. Enter url chrome://extensions and optionally install the xontab virtual keyboard extension.

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 9 - Allo Piano 2.1 Firmware
//
////////////////////////////////////////////////////////////////////////////////

cd ~
wget https://github.com/allocom/piano-firmware/archive/master.zip
sudo unzip -q master.zip
sudo rm ./master.zip
sudo cp -r ./piano-firmware-master/lib/firmware/allo /lib/firmware
sudo rm -rf ./piano-firmware-master

////////////////////////////////////////////////////////////////////////////////
//
// COMPONENT 10 - Allo Boss 2 OLED display
//
////////////////////////////////////////////////////////////////////////////////

cd ~
echo "Install Python libs"
sudo apt-get -y install python-smbus python-pil
sudo apt-get clean
echo "Install Display driver"
sudo cp ./moode/other/allo/boss2/boss2_oled.tar.gz /opt/
cd /opt/
sudo tar -xzf ./boss2_oled.tar.gz
sudo rm ./boss2_oled.tar.gz
cd ~
echo "Install Systemd unit"
sudo cp ./moode/lib/systemd/system/boss2oled.service /lib/systemd/system/
sudo systemctl daemon-reload
sudo systemctl disable boss2oled.service

////////////////////////////////////////////////////////////////////////////////
//
// FINAL - Clean up
//
////////////////////////////////////////////////////////////////////////////////

cd ~
sudo apt-get clean
sudo /var/www/command/util.sh clear-syslogs
mpc update
#sleep 10
sudo reboot

################################################################################
#
#
# Appendix
#
#
################################################################################

////////////////////////////////////////////////////////////////////////////////
//
// Squashfs procedures
//
////////////////////////////////////////////////////////////////////////////////

1. SQUASH /var/www

sudo -i
echo "/var/local/moode.sqsh   /var/www        squashfs        ro,defaults     0       0" >>/etc/fstab
logout

cd ~
sudo rm /var/local/moode.sqsh
sudo mksquashfs /var/www /var/local/moode.sqsh

sudo rm -rf /var/www/*
sync

sudo reboot

2. UNSQUASH /var/www

sudo killall -s 9 watchdog.sh
sudo systemctl stop nginx
sudo systemctl stop php7.3-fpm
sudo umount /var/www

sudo rmdir /var/www
sudo unsquashfs -d /var/www /var/local/moode.sqsh
sync

sudo sed -i /moode.sqsh/d /etc/fstab
sudo rm /var/local/moode.sqsh

sudo reboot

////////////////////////////////////////////////////////////////////////////////
//
// SD Card procedures (Mac OSX)
//
////////////////////////////////////////////////////////////////////////////////


1. Write SD Card to image file with truncation to the root partition end blk.

moOde 5.4.0 fdisk -l (Raspbian Buster)
======================================
Device         Boot  Start     End Sectors  Size Id Type
/dev/mmcblk0p1        8192  532480  524289  256M  c W95 FAT32 (LBA)
/dev/mmcblk0p2      540672 7708671 7168000  3.4G 83 Linux

moOde 6.6.0 fdisk -l (RaspiOS Buster)
=====================================
Device         Boot  Start     End Sectors  Size Id Type
/dev/mmcblk0p1        8192  532479  524288  256M  c W95 FAT32 (LBA)
/dev/mmcblk0p2      532480 7700479 7168000  3.4G 83 Linux


Use End block + 1 as the block count in dd

diskutil list
diskutil unmountDisk /dev/disk3
# sudo dd if=/dev/disk3 of=/Users/Lt5user/Documents/moode-iso.img count=7708672 bs=512
sudo dd if=/dev/disk3 of=/Users/Lt5user/Documents/moode-iso.img count=7700480 bs=512
diskutil eject /dev/disk3

2. Write image to SD Card.

diskutil list
diskutil unmountDisk /dev/disk3
sudo dd if=/Users/Lt5user/Documents/moode-iso.img of=/dev/rdisk3 bs=1m
diskutil eject /dev/disk3

////////////////////////////////////////////////////////////////////////////////
//
// SD Card procedures (Windows)
//
////////////////////////////////////////////////////////////////////////////////

NOTE: The latest version of Win32diskImager v1.0 now has a setting where you can
select to read only allocated partitions. It is a free download from Sourceforge.

Download it using the link below.
https://sourceforge.net/projects/win32diskimager/

Assuming STEP 2 was performed to resize the root partition to 3GB, the resulting
moode.img file will only be 3GB in size. This will compress down to about 1GB.

################################################################################
#  Post questions regarding this guide to https://github.com/moode-player/moode
################################################################################
