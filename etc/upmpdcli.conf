# The XML tags in the comments are used to help produce the documentation
# from the sample/reference file, and not at all at run time, where
# comments are just comments. Edit at will.

# The command line options have higher priorities than the values in
# this file.

# <grouptitle>Upmpdcli general parameters</grouptitle>
friendlyname = Moode UPNP
ohproductroom = Moode UPNP
iconpath = /usr/share/upmpdcli/moode_audio.png

# <var name="logfilename" type="fn"><brief>Log file
# name.</brief><descr>Defaults to stderr. This can also be specified as -d
# logfilename.</descr></var>
#logfilename = /var/log/moodeupnp.log

# <var name="loglevel" type="int" values="0 5 2"><brief>Log
# level.</brief><descr>Can also be specified as -l loglevel.</descr></var>
#loglevel = 2

# <var name="checkcontentformat" type="bool" values="1"><brief>Check that
# input format is supported.</brief><descr>Extract the protocolinfo
# information from the input metadata and check it against our supported
# formats. Set this option to 0 if a control point or media server sends
# good audio data with bad metadata.</descr></var>
checkcontentformat = 1

# <grouptitle>TIDAL streaming service parameters</grouptitle>
# <var name="tidaluser" type="string"><brief>Tidal user name.</brief>
# <descr>Your Tidal login name.</descr></var>
# <var name="tidalpass" type="string"><brief>Tidal password.</brief>
# <descr>The password for your Tidal account.</descr></var>
# <var name="tidalquality" type="cstr" "values="low high lossless">
# <brief>Tidal stream quality.</brief> <descr>'low' and 'high' are aac
# streams. 'lossless' is FLAC and will only work if your subscription
# allows it.</descr></var>
#tidaluser = my username (email)
#tidalpass = mypassword
#tidalquality = lossless

# <var name="qobuzuser" type="string"><brief>Qobuz user name.</brief>
# <descr>Your Qobuz login name.</descr></var>
# <var name="qobuzpass" type="string"><brief>Qobuz password.</brief>
# <descr>The password for your Qobuz account.</descr></var>
# <var name="qobuzformatid" type="cstr" "values="5 7">
# <brief>Qobuz stream quality.</brief> <descr>5 for mp3/320, 7 for FLAC if
# your subscription allows it.</descr></var>
#qobuzuser = myusername
#qobuzpass = mypassword or my password MD5sum
#qobuzformatid = 7

# <grouptitle>Google Music streaming service parameters</grouptitle>
# <var name="gmusicuser" type="string"><brief>Google Music user name.</brief>
# <descr>Your Google Music login name (probably a gmail address).</descr></var>
# <var name="gmusicpass" type="string"><brief>Google Music password.</brief>
# <descr>The password for your Google Music account.</descr></var>
# <var name="gmusicquality" type="cstr" "values="hi med low">
# <brief>Google Music stream quality.</brief> <descr>'hi' for mp3/320, 'med'
# for mp3/160, 'low' for mp3/128.</descr></var>
# <var name="gmusicdeviceid" type="string"> <brief>Google Music device
# id.</brief> <descr>Your system MAC address will be used by default, but
# this will count against the maximum count of registered devices for this
# account.  You can set the gmusicdeviceid value to the device ID from a
# phone or tablet on which you also use Google Play Music.</descr></var>
#gmusicuser = me@gmail.com
#gmusicpass = agoodpassword
#gmusicquality = med
#gmusicdeviceid =

# <grouptitle>Audio control hooks</grouptitle>

# <var name="onstart" type="fn"><brief>Command to run when playback is
# about to begin.</brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onstart =

# <var name="onplay" type="fn"><brief>Command to run when MPD state
# switches to "PLAY".  </brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onplay =

# <var name="onpause" type="fn"><brief>Command to run when MPD state
# switches to "PAUSE".  </brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onpause =

# <var name="onstop" type="fn"><brief>Command to run when MPD state switches to
# "STOP".</brief><descr>Specify the full path to the program,
# e.g. /usr/bin/logger.</descr></var>
#onstop =

# <var name="externalvolumecontrol" type="fn"><brief>Use external command
# to manage the the sound volume (0/1).</brief><descr>This is used in the
# case where MPD is unable to control the volume, but some other command
# can, for example if you have an external amp on which it is possible to
# set and read the volume through scripts. If set, the calls to MPD to set
# and read the volume will be replaced by executions of 'onvolumechange'
# and 'getexternalvolume'</descr></var>
#externalvolumecontrol = 

# <var name="getexternalvolume" type="fn"><brief>Command to run for reading
# the sound volume.</brief><descr>The command should write a 0-100 numeric
# value to stdout.</descr></var>
#getexternalvolume =

# <var name="onvolumechange" type="fn"><brief>Command to run to set the
# volume.</brief><descr>Used when 'externalvolumecontrol' is set.
# Specify the full path to the program, which is called with the volume as
# the first argument, e.g. /some/script 85.</descr></var>
#onvolumechange =

radiolist = /etc/upmpdcli-radio.conf
